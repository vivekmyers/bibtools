#!/usr/bin/env perl

# Author: Vivek Myers <vivek.myers@gmail.com>
# Date: 2024-11-20
#
# Format .bib files, sorting by bibkey, titlecasing, and fixing common abbreviations
# Strips URLs, abstracts, keywords, notes, and language fields from non-misc entries
# Converts papers with arXiv identifiers to misc entries with eprint fields

use utf8;
use autodie;
use Getopt::Long;
use List::Util qw(max);

$wrap = 90;
$indent = 4;

GetOptions(
    "w|wrap=i" => \$wrap,
    "i|indent=i" => \$indent,
    "u|unsorted" => \$unsorted,
);

%acronyms = (
    "rl" => "RL",
    "gcrl" => "GCRL",
    "llm" => "LLM",
    "vlm" => "VLM",
    "ml" => "ML",
    "nlp" => "NLP",
    "cv" => "CV",
    "dqn" => "DQN",
    "ddpg" => "DDPG",
    "ppo" => "PPO",
    "sac" => "SAC",
    "td3" => "TD3",
    "trpo" => "TRPO",
    "d4rl" => "D4RL",
    "vae" => "VAE",
    "gan" => "GAN",
    "arxiv" => "arXiv",
    "icml" => "ICML",
    "nips" => "NeurIPS",
    "neurips" => "NeurIPS",
    "corl" => "CoRL",
    "aaai" => "AAAI",
    "icra" => "ICRA",
    "l4dc" => "L4DC",
    "iclr" => "ICLR",
    "iccv" => "ICCV",
    "eccv" => "ECCV",
    "cvpr" => "CVPR",
    "ijcai" => "IJCAI",
    "ijrr" => "IJRR",
    "rss" => "RSS",
    "acl" => "ACL",
    "emnlp" => "EMNLP",
    "naacl" => "NAACL",
    "ieee" => "IEEE",
    "hiql" => "HIQL",
    "iql" => "IQL",
    "crl" => "CRL",
    "cmd" => "CMD",
);

@ordinals = (
    "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth",
    "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth",
    "sixteenth", "seventeenth", "eighteenth", "nineteenth", "twentieth", "thirtieth",
    "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth",
    "hundredth", "thousandth", "millionth", "billionth", "trillionth"
);
push @ordinals, qr/\d*1st/i, qr/\d*2nd/i, qr/\d*3rd/i, qr/\d*[04-9]th/i;
$ordinals = join "|", @ordinals;
$ordinals = qr/(\w+-)*($ordinals)/i;

sub casefix {
    local $_ = shift;
    while (my ($k, $v) = each %acronyms) {
        s/\b$k\b/$v/gi;
    }
    return $_;
}

sub titlecase {
    my @small_words = qw( (?<!q&)a an and as at(?!&t) but
        by en for if in of on or the to v[.]? via vs[.]? );
    my $small_re = join '|', @small_words;
    my $apos = qr/ (?: ['’] [[:lower:]]* )? /x;

    local $_ = shift;
    s{\A\s+}{}, s{\s+\z}{};
    $_ = lc $_ if not /[[:lower:]]/;

    s{ \b (_*) (?:
        ( (?<=[ ][/\\]) [[:alpha:]]+ [-_[:alpha:]/\\]+ |
        [-_[:alpha:]]+ [@.:] [-_[:alpha:]@.:/]+ $apos ) |
        ( (?i: $small_re ) $apos ) |
        ( (?<!\\['"^])(?<!\\) [[:alpha:]] [[:lower:]'’()\[\]{}]* $apos ) |
        ( [[:alpha:]] [[:alpha:]'’()\[\]{}]* $apos )) (_*) \b
    }{
        $1 . (
        defined $2 ? $2
        : defined $3 ? "\L$3"
        : defined $4 ? "\u\L$4"
        : $5
        ) . $6
    }xeg;

    s{ (  \A [[:punct:]]* |  [:.;?!][ ]+ |  [ ]['"“‘(\[][ ]*     ) ( $small_re ) \b }{$1\u\L$2}xig;
    s{ \b ( $small_re ) (?= [[:punct:]]* \Z |   ['"’”)\]] [ ] ) }{\u\L$1}xig;
    s{ \b (?<! -) ( $small_re ) (?= -[[:alpha:]]+) }{\u\L$1}xig;
    s{ \b (?<!…) ( [[:alpha:]]+- ) ( $small_re ) (?! - ) }{$1\u$2}xig;

    return $_;
}

if (@ARGV != 1) {
    print STDERR "Usage: bibfix <bibfile>\n";
    exit;
}

$arg = shift;
open $biber,
    "biber --tool --output-safechars --output_align --output-legacy-dates"
    . " --output_indent=$indent --output_fieldcase=lower -q -O - $arg |"
    or die "Can't open biber: $!";

$/ = "";
$balanced = qr{
    (?<bb>(?:\\.|[^\{\}\\]|\{(?&bb)\})*)
}sx;

while (<$biber>) {
    utf8::decode $_;
    my %entry;
    my %extra;

    while (/\b(\w+)\b\s*=\s*(?:\{(?<contents>$balanced)\}|(?<bare>\w+))/gsm) {
        $entry{$1} = $+{contents} or $extra{$1} = $+{bare};
    };
    exists $entry{author} or die "No author found for: $_";

    /\@(\S+)\s*\{(.*),$balanced\}\s*/ or die "No key found for: $_";
    $+[0] == length $_ or die "Unbalanced braces in: $_ at ".$+[0]." of ".length $_;
    my $type = $1;
    my $k = $2;

    if ($entry{journaltitle} =~ /arXiv.\s*(\d+).(\d+)/i
            or $entry{volume} =~ m{abs/(\d+).(\d+)}i) {
        my $eprint = "$1.$2";
        $type = "misc";
        unless (exists $entry{eprint}) {
            $entry{eprint} = $eprint;
        };
        unless (exists $entry{eprinttype}) {
            $entry{eprinttype} = "arXiv";
        };
        unless (exists $entry{howpublished}) {
            $entry{howpublished} = "{arXiv:$eprint}"
        };
        delete $entry{volume};
        delete $entry{journaltitle};
    }

    $type eq "misc" and not exists $entry{howpublished} 
        and exists $entry{eprint}
        and exists $entry{eprinttype}
        and $entry{eprinttype} =~ /arxiv/i  
        and $entry{howpublished} = "arXiv:".$entry{eprint};

    my @titlepats = qw(booktitle journal journaltitle title shorttitle);
    for my $key (@titlepats) {
        $_ = $entry{$key} or next;

        s/[{}]//g;
        s/^\s*//;
        s/\s*$//;
        s/[\.]*$//g;
        $key = lc $key;

        if ($key =~ /^journal|^booktitle/i) {
            s/^\s*the\s+//i;
            s/^\s*$ordinals\s+annual\s+//i;
            s/^\s*$ordinals\s+//i;
            s/^\s*proceedings of\s+//i;
            s/^\s*$ordinals\s+annual\s+//i;
            s/^\s*$ordinals\s+//i;
            s/^\s*conference on ((?:\s*\b\w+\b\s*){4,})/$1/i;
            s/^\s*advances in\s+//i;
            s/^\s*the\s+//i;
            s/^\s*\d+\s*//;
            s/^\s*$ordinals\s+//i;
            s/\(.*\)\s*$//i;
            s/arxiv/arXiv/gi;
            s/\s*,.*$//;
        };

        if ($key eq "journaltitle") {
            delete $entry{journaltitle};
            $key = "journal"
        };

        $_ = ucfirst titlecase $_;
        $_ = casefix $_;

        s{
            \b
              (?: (?:(?<=\s)[a-zA-Z\-]*\\.[a-zA-Z\-]*)+
                  |( ([A-Z][a-zA-Z\-]+
                          |[A-Z][a-zA-Z\-]*\d+[a-zA-Z\-]*\d*
                          |[iI])
                     (\s*([A-Z][a-zA-Z\-]+))* ) )
            \b(?!\\)
        }{
            "{$&}"
        }gxe;

        $entry{$key} = $_;
    }

    $entry{author} =~ s/\*//g;

    exists $entry{eprinttype} and $entry{eprinttype} =~ s/\b(arxiv)\b/arXiv/gi;

    @dk = qw(urldate abstract keywords note lang issn location file annotation);

    if ($type eq "misc") {
        push @dk, qw(eprintclass)
    } else {
        push @dk, qw(eprint urldate);
    }

    if (exists $entry{url} and $entry{url} =~ /doi\.org/) {
        push @dk, qw(url);
    }

    if (exists $entry{doi} and exists $entry{url} and $entry{doi} =~ /arXiv/i
                           and $entry{url} =~ /arXiv/i) {
        delete $entry{doi};
    }

    if ($entry{howpublished} =~ /\Q$entry{number}\E/i) {
        delete $entry{number};
    }

    for my $key (@dk) {
        delete $entry{$_} for grep {/^$key/i} keys %entry;
    }

    %entry = map {$_ => "{".$entry{$_}."}"} keys %entry;
    $entry{$_} = $extra{$_} for keys %extra;

    my $spc = " " x $indent;
    my $eqidt = max map {1 + length($_)} keys %entry;
    my @fields = sort {$a cmp $b} keys %entry;
    my @lines = map {"$spc".(sprintf "%-${eqidt}s", $_)."= ".$entry{$_}."," } @fields;
    push @bibkeys, $k unless exists $entries{$k};
    $entries{$k}  =<<~EOF;
    \@$type\{$k,
    @{[ join "\n", @lines ]}
    \}
    EOF
};

unlink "$arg.blg";

sub getkeys {
    if ($unsorted) {
        return @bibkeys;
    } else {
        return sort {(lc $a) cmp (lc $b)} keys %entries
    }
};


for (getkeys) {
    $_ = $entries{$_};
    while (/\s\s=/ and !/\S\s=/) {
        s/^(.*)\s(\s=)|^(\s)\s(\s*\S[^=]*$)/$1$2$3$4/gm;
    };
    for (split /\n/) {
        /^(.*)=(.*)$/m;
        $nidt = (3 + length $1);
        $cr = "\n" . (" " x $nidt);
        $n = $wrap;
        while (/.*$/ and length $& > $n) {
            s/^(.{1,$n}[^= ])\s+([^ =])/$2/ or last;
            print "$1$cr";
            $n = $wrap - $nidt;
            $n < 1 and $n = 10;
        };
        print "$_\n";
    }
    print "\n";
}

